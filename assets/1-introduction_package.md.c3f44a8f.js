import{_ as a,c as e,o as n,d}from"./app.700cfe46.js";const u=JSON.parse('{"title":"Wayland 软件包内容","description":"","frontmatter":{},"headers":[{"level":2,"title":"wayland.xml","slug":"wayland-xml","link":"#wayland-xml","children":[]},{"level":2,"title":"wayland-scanner","slug":"wayland-scanner","link":"#wayland-scanner","children":[]},{"level":2,"title":"libwayland","slug":"libwayland","link":"#libwayland","children":[]}],"relativePath":"1-introduction/package.md","lastUpdated":1674200399000}'),l={name:"1-introduction/package.md"},r=d('<h1 id="wayland-软件包内容" tabindex="-1">Wayland 软件包内容 <a class="header-anchor" href="#wayland-软件包内容" aria-hidden="true">#</a></h1><p>当你在遵循 <a href="http://freedesktop.org" target="_blank" rel="noreferrer">freedesktop.org</a> 规范的 Linux 发行版中安装 &quot;wayland&quot; 的时候，很可能最后得到 <code>libwayland-client</code>、<code>libwayland-server</code>、<code>wayland-scanner</code> 和 <code>wayland.xml</code> 这些文件。它们或分别位于 <code>/usr/lib</code>、<code>/usr/include</code>、<code>/usr/bin</code> 和 <code>/usr/share/wayland</code> 中。该软件包代表了 Wayland 协议最主流的实现，但这并不是唯一的。第三章详细介绍了 Wayland 的实现；这本书其余部分同样适用于任何实现。</p><h2 id="wayland-xml" tabindex="-1">wayland.xml <a class="header-anchor" href="#wayland-xml" aria-hidden="true">#</a></h2><p>Wayland 协议通过 XML 文件进行定义。如果定位到并在编辑器中打开了 &quot;wayland.xml&quot; 文件，你将会发现 Wayland 核心协议的 XML 规范。这是一个高级协议，它建立在我们在下一章将要讨论的线协议之上。本书的大部分内容致力于解释该文件。</p><h2 id="wayland-scanner" tabindex="-1">wayland-scanner <a class="header-anchor" href="#wayland-scanner" aria-hidden="true">#</a></h2><p>&quot;wayland-scanner&quot; 工具被用于处理这些 XML 文件并生成对应代码，其最常用的实现正如你现在所见的 <code>wayland-scanner</code>，它可以用于从诸如 wayland.xml 之类的文件生成 C 头文件和上下文代码。在其它的编程语言中有对应的 scanner，如 wayland-rs (Rust)、waymonad-scanner (Haskell) 等。</p><h2 id="libwayland" tabindex="-1">libwayland <a class="header-anchor" href="#libwayland" aria-hidden="true">#</a></h2><p><code>libwayland-client</code> 和 <code>libwayland-server</code> 这两个库包含了一个双端通信线协议的实现，提供了一些常用的实用工具来处理 Wayland 的数据结构、简单的事件循环等。此外，这些库还包含 <code>wayland-scanner</code> 生成的 Wayland 核心协议的预编译副本。</p>',8),c=[r];function o(t,i,s,y,h,w){return n(),e("div",null,c)}const p=a(l,[["render",o]]);export{u as __pageData,p as default};
