import{_ as t,c as a,o,a as e,b as n}from"./app.700cfe46.js";const $=JSON.parse('{"title":"协议设计","description":"","frontmatter":{},"headers":[],"relativePath":"2-protocol-design/index.md","lastUpdated":1674200399000}'),s={name:"2-protocol-design/index.md"},d=e("h1",{id:"协议设计",tabindex:"-1"},[n("协议设计 "),e("a",{class:"header-anchor",href:"#协议设计","aria-hidden":"true"},"#")],-1),r=e("p",null,"Wayland 协议是由多层抽象结构所构建的。它从一个基本的线协议格式开始（该格式是可用事先约定好的接口解码的消息流），然后用更高级别的程序来枚举接口，创建符合这些接口的资源，以及交换相关信息，这便是 Wayland 协议及其扩展的内容。且最重要的是，我们拥有了一些更宽泛的模式，这些模式在 Wayland 协议设计中经常用到。我们将在本章节中介绍所有相关内容。",-1),c=e("p",null,"让我们继续自下而上地学习。",-1),i=[d,r,c];function l(_,p,h,f,m,u){return o(),a("div",null,i)}const g=t(s,[["render",l]]);export{$ as __pageData,g as default};
