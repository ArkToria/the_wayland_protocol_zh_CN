import{_ as t,c as a,o,a as e,b as n}from"./app.7c3264b1.js";const W=JSON.parse('{"title":"协议设计","description":"","frontmatter":{},"headers":[],"relativePath":"2-protocol-design/index.md","lastUpdated":1675327495000}'),s={name:"2-protocol-design/index.md"},d=e("h1",{id:"协议设计",tabindex:"-1"},[n("协议设计 "),e("a",{class:"header-anchor",href:"#协议设计","aria-hidden":"true"},"#")],-1),r=e("p",null,"Wayland 协议由多层抽象结构组成。 它从一个基本的 Wire 协议格式开始（该格式可以用事先约定的接口解码信息流）， 然后用更高层次的程序枚举接口、创建符合这些接口的资源、交换相关信息， 这便是 Wayland 协议及其扩展协议的内容。 除此以外，我们还有一些更广泛的模式，这些模式在 Wayland 协议的设计中经常使用。 我们将在本章节中介绍所有相关内容。",-1),c=e("p",null,"让我们自下而上，开始学习。",-1),i=[d,r,c];function l(_,p,h,f,m,u){return o(),a("div",null,i)}const $=t(s,[["render",l]]);export{W as __pageData,$ as default};
