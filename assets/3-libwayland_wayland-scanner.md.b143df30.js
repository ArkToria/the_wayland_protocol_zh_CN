import{_ as a,c as s,o as l,d as n}from"./app.1dfb0975.js";const A=JSON.parse('{"title":"wayland-scanner","description":"","frontmatter":{},"headers":[],"relativePath":"3-libwayland/wayland-scanner.md","lastUpdated":1674200399000}'),e={name:"3-libwayland/wayland-scanner.md"},o=n(`<h1 id="wayland-scanner" tabindex="-1">wayland-scanner <a class="header-anchor" href="#wayland-scanner" aria-hidden="true">#</a></h1><p>Wayland 包中含有一个二进制文件：<code>wayland-scanner</code>。该工具基于 2.3 节中所提及的定义 Wayland 协议的 XML 文件来生成 C 头文件和对应的胶水代码。生成的头文件为 <code>wayland-client-protocol.h</code> 和 <code>wayland-server-protocol.h</code>，此外通常还包括对协议进行封装的头文件 <code>wayland-client.h</code> 和 <code>wayland-server.h</code> ，而不是直接使用它们。</p><p>该工具的用法非常简单（并可以在 <code>wayland-scanner -h</code> 看到用法总结），但仍可概述如下：</p><ul><li>生成客户端头文件</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wayland-scanner</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">client-header</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">protocol.xml</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">protocol_client.h</span></span>
<span class="line"></span></code></pre></div><ul><li>生成服务端头文件</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wayland-scanner</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">server-header</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">protocol.xml</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">protocol_server.h</span></span>
<span class="line"></span></code></pre></div><ul><li>生成胶水代码</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wayland-scanner</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">private-code</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">protocol.xml</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">protocol.c</span></span>
<span class="line"></span></code></pre></div><p>不同的构建系统将使用不同的方法来自定义命令——请查阅构建系统的文档。一般来说，您将需要在构建时运行 <code>wayland-scanner</code>，然后编译并将你的应用程序链接到胶水代码。</p><p>如果你方便的话可以立即尝试任意的 Wayland 协议（示例 <code>wayland.xml</code> 可能在 <code>/usr/share/wayland</code>）。打开胶水代码和头文件，并在阅读下面的章节时进行参考，以了解 <code>libwayland</code> 提供的原语在生成的代码中如何实际应用。</p>`,11),p=[o];function c(t,r,d,y,C,i){return l(),s("div",null,p)}const h=a(e,[["render",c]]);export{A as __pageData,h as default};
