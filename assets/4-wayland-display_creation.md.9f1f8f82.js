import{_ as s,c as a,o as n,d as l}from"./app.679b0eea.js";const d=JSON.parse('{"title":"创建一个显示","description":"","frontmatter":{},"headers":[{"level":2,"title":"Wayland 客户端","slug":"wayland-客户端","link":"#wayland-客户端","children":[]},{"level":2,"title":"Wayland 服务端","slug":"wayland-服务端","link":"#wayland-服务端","children":[]}],"relativePath":"4-wayland-display/creation.md","lastUpdated":1674200399000}'),p={name:"4-wayland-display/creation.md"},o=l(`<h1 id="创建一个显示" tabindex="-1">创建一个显示 <a class="header-anchor" href="#创建一个显示" aria-hidden="true">#</a></h1><p>启动你的文本编辑器——是时候编写我们的第一行代码了。</p><h2 id="wayland-客户端" tabindex="-1">Wayland 客户端 <a class="header-anchor" href="#wayland-客户端" aria-hidden="true">#</a></h2><p>连接到 Wayland 服务端并创建一个 <code>wl_display</code> 来管理连接状态是非常容易的：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">wayland-client.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">argv[]</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">wl_display</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">display</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_display_connect</span><span style="color:#89DDFF;">(NULL);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">display</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Failed to connect to Wayland display.</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Connection established!</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">wl_display_disconnect</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">display</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>让我们来编译并运行这个程序。假设你在阅读文本的时候使用的是 Wayland 混成器，那么结果应该是这样的：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">client</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">client.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-lwayland-client</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># cc 实际上是 gcc 的软链接</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./client</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">established!</span></span>
<span class="line"></span></code></pre></div><p><code>wl_display_connect</code> 是客户端建立 Wayland 连接最常见的方式，其声明如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_display</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#82AAFF;">wl_display_connect</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>参数 <code>name</code> 是 Wayland 显示服务的名称，通常是 &quot;wayland-0&quot;（可以通过 <code>$WAYLAND_DISPLAY</code> 环境变量查看）。你可以在我们的测试客户端中把 <code>NULL</code> 换成这个，然后自己试试——这很可能是可行的。这与 <code>$XDG_RUNTIME_DIR</code> 中的 Unix 套接字的名称相对应。但是 <code>NULL</code> 是推荐选项，如果选用，<code>libwayland</code> 会有如下操作：</p><ul><li><ol><li>如果 <code>$WAYLAND_DISPLAY</code> 已经被设置，则尝试连接到 <code>$XDG_RUNTIME_DIR/$WAYLAND_DISPLAY</code></li></ol></li><li><ol start="2"><li>试图连接 <code>$XDG_RUNTIME_DIR/wayland-0</code></li></ol></li><li><ol start="3"><li>失败</li></ol></li></ul><p>这允许用户通过设置 <code>$WAYLAND_DISPLAY</code> 变量来特别指定他们想在哪个 Wayland 显示器上运行他们的客户端。如果有更复杂的需求，你也可以自行建立连接，并从文件描述符中创建一个 Wayland 显示服务：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_display</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#82AAFF;">wl_display_connect_to_fd</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>你也可以通过 <code>wl_display_get_fd</code> 获得 <code>wl_display</code> 正在使用的文件描述符，无论你是如何创建这个显示服务的。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wl_display_get_fd</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_display</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">display</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="wayland-服务端" tabindex="-1">Wayland 服务端 <a class="header-anchor" href="#wayland-服务端" aria-hidden="true">#</a></h2><p>这个过程对服务端来说也是相当简单的。显示服务的创建和套接字绑定是分离的，以使得你有时间在任何客户端能够连接到显示服务之前配置它。这里是另一个简例：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">wayland-server.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">argv[]</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">wl_display</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">display</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_display_create</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">display</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Unable to create Wayland display.</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">socket </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_display_add_socket_auto</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">display</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">socket</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Unable to add socket to Wayland display.</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Running Wayland display on %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> socket</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">wl_display_run</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">display</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">wl_display_destroy</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">display</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>让我们继续编译并运行：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">server</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">server.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-lwayland-server</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./server</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#FFCB6B;">Running</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Wayland</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">display</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">on</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wayland-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">WAYLAND_DISPLAY=wayland-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./client</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">established!</span></span>
<span class="line"></span></code></pre></div><p>使用 <code>wl_display_add_socket_auto</code> 将会允许 <code>libwayland</code> 自动决定显示服务的名称，默认为 <code>wayland-0</code>，或者 <code>wayland-$n</code>，这取决于是否有其他的 Wayland 混成器在 <code>$XDG_RUNTIME_DIR</code> 中存有套接字。然而，与客户端一样，你还有一些其他的选项来配置显示服务：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wl_display_add_socket</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_display</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">display</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wl_display_add_socket_fd</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_display</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">display</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sock_fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>在添加套接字后，调用 <code>wl_display_run</code> 将会运行 <code>libwayland</code> 的内部事件循环，并阻塞至调用 <code>wl_display_terminate</code> 终止。这个事件循环是什么？让我们翻开下一页就明白了！</p>`,23),e=[o];function c(t,r,y,F,D,i){return n(),a("div",null,e)}const A=s(p,[["render",c]]);export{d as __pageData,A as default};
