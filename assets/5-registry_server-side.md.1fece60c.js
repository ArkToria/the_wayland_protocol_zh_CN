import{_ as s,c as n,o as a,d as l}from"./app.679b0eea.js";const A=JSON.parse('{"title":"注册全局对象","description":"","frontmatter":{},"headers":[],"relativePath":"5-registry/server-side.md","lastUpdated":1674200399000}'),p={name:"5-registry/server-side.md"},o=l(`<h1 id="注册全局对象" tabindex="-1">注册全局对象 <a class="header-anchor" href="#注册全局对象" aria-hidden="true">#</a></h1><p>用 <code>libwayland-server</code> 注册全局对象的方式与之前有些不同。当你用<code>wayland-scanner</code> 生成服务端代码时，它会创建接口（类似于监听器）和发送事件的胶水代码。第一项任务是注册全局对象，当全局对象被绑定时，用一个函数来启动资源<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。就代码而言，其结果看起来像这样。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_output_handle_bind</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_client </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">version</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> my_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// TODO</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> wl_display </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">display </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_display_create</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> my_state state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> ... </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">wl_global_create</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">wl_display</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">wl_output_interface</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> wl_output_handle_bind</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果你采用这段代码，例如把它修补到 4.1 章的服务端示例中，你会让一个 <code>wl_output</code> 全局接口对我们上次写的 &quot;globals&quot; 程序可见<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。然而，任何试图绑定到这个全局接口的对象都会将运行到我们的 TODO 处。为了完善这一点，我们还需要提供一个 <code>wl_output</code> 接口的实现。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_output_handle_resource_destroy</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_resource </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">resource</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> my_output </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_output </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_resource_get_user_data</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">resource</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// TODO: Clean up resource</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">remove_to_list</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client_output</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">client_outputs</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> client_output</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_output_handle_release</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_client </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_resource </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">resource</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">wl_resource_destroy</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">resource</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_output_interface</span></span>
<span class="line"><span style="color:#A6ACCD;">wl_output_implementation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    .release </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_output_handle_release</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_output_handle_bind</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_client </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">version</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> my_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> my_output </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_output </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">calloc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_output</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> wl_resource </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">resource </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_resource_create</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">        client</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">wl_output_implementation</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wl_output_interface</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">version</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">wl_resource_set_implementation</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">resource</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">wl_output_implementation</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        client_output</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> wl_output_handle_resource_destroy</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">client_output</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">resource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> resource</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">client_output</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// TODO: Send geometry event, et al</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">add_to_list</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">client_outputs</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> client_output</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>光这样是很难理解的，因此让我们来逐一解释。在底部，我们已经扩展了我们的 &quot;bind handle&quot;， 以创建一个 <code>wl_resource</code> 来跟踪这个对象的服务端状态（使用客户端 ID）。当我们这样做的时候，我们向 <code>wl_resource_create</code> 提供了一个指向我们的接口实现的指针，即 <code>wl_output_implementation</code>，在这段代码中是一个常量静态结构体。这个类型 (<code>struct wl_output_interface</code>) 是由 <code>wayland-scanner</code> 生成的，包含了这个接口所支持的每个请求的一个函数指针。我们还借此机会分配了一个小容器，用于存储我们需要的，libwayland 不为我们处理的任何额外状态，其具体性质因协议不同而不同。</p><p><strong>注意：</strong> 这里有两个不同的东西，但是使用同一个名字: <code>struct wl_output_interface</code> 是接口的实例，另一个 <code>wl_output_interface</code> 是 <code>wayland-scanner</code> 生成的一个全局常规变量，它包含与实现有关的元数据（比如上面例子中使用的版本）。</p><p>当客户端发送释放请求的时候，我们的 <code>wl_output_handle_release</code> 函数就会被调用，表明它们不再需要这个资源——所以我们应该销毁它。这反过来触发了 <code>wl_output_handle_resource_destroy</code> 函数，稍后我们将扩展该函数以释放我们先前为它本配的所有状态。这个函数也被传递到 <code>wl_resource_create</code> 中作为析构器，如果客户端在没有明确发送释放请求的情况下意外终止，它将会被调用。</p><p>我们代码中剩下的另一个 &quot;TODO&quot; 是发送 &quot;name&quot; 以及其他一些事件。如果我们回顾一下 <code>wayland.xml</code>，我们会在接口上看到这个事件：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">event</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">geometry</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">description</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">summary</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">properties of the output</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">The geometry event describes geometric properties of the output.</span></span>
<span class="line"><span style="color:#A6ACCD;">The event is sent when binding to the output object and whenever</span></span>
<span class="line"><span style="color:#A6ACCD;">any of the properties change.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">The physical size can be set to zero if it doesn&#39;t make sense for this</span></span>
<span class="line"><span style="color:#A6ACCD;">output (e.g. for projectors or virtual outputs).</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">description</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">physical_width</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">physical_height</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">subpixel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">enum</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">subpixel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">make</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">model</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transform</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">enum</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transform</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">event</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当输出被绑定后，应该交由我们来发送这个事件，这很容易实现：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_output_handle_bind</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_client </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">version</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> my_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> my_output </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_output </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">calloc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_output</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> wl_resource </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">resource </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_resource_create</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">        client</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">wl_output_implementation</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wl_output_interface</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">version</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">wl_resource_set_implementation</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">resource</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> wl_output_implementation</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        client_output</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> wl_output_handle_resource_destroy</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">client_output</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">resource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> resource</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">client_output</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 发送事件（对应于 wayland.xml 中声明的 event arg）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">wl_output_send_geometry</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">resource</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1920</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1080</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        WL_OUTPUT_SUBPIXEL_UNKNOWN</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Foobar, Inc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Fancy Monitor 9001 4K HD 120 FPS Noscope</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        WL_OUTPUT_TRANSFORM_NORMAL</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">add_to_list</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">client_outputs</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> client_output</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>注意：</strong> 这里所用的 <code>wl_output::geometry</code> 是为了解释说明，但在实践中对它的使用有一些特殊考虑。在你的客户端或服务端中实现这个事件之前，请查看协议的 XML 文件定义。</p><p>资源代表每个客户的对象实例的服务端状态。</p><p>如果你对更强大的东西感兴趣，可以从 Weston 项目中获得一个稍微复杂的 &quot;globals&quot; 程序版本，名为 <code>weston-info</code>。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><a href="#fnref1" class="footnote-backref">↩︎</a></li><li id="fn2" class="footnote-item"><a href="#fnref2" class="footnote-backref">↩︎</a></li></ol></section>`,17),t=[o];function e(c,r,F,y,D,i){return a(),n("div",null,t)}const u=s(p,[["render",e]]);export{A as __pageData,u as default};
