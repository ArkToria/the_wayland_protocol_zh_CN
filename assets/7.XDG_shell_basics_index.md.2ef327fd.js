import{_ as s,c as a,o as e,d as o}from"./app.7c3264b1.js";const y=JSON.parse('{"title":"XDG shell 基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"xdg_wm_base","slug":"xdg-wm-base","link":"#xdg-wm-base","children":[]}],"relativePath":"7.XDG_shell_basics/index.md","lastUpdated":1673863362000}'),l={name:"7.XDG_shell_basics/index.md"},n=o(`<h1 id="xdg-shell-基础" tabindex="-1">XDG shell 基础 <a class="header-anchor" href="#xdg-shell-基础" aria-hidden="true">#</a></h1><p>XDG (cross-desktop group) shell 是 Wayland 的一个标准扩展协议，描述了应用窗口的语义。它定义了两个 <code>wl_surface</code> 角色：&quot;toplevel&quot; 用于你的顶层应用窗口；&quot;popup&quot; 则用于诸如上下文菜单、下拉菜单、工具提示等等——它们是顶层窗口的子集。有了这些，你可以将其归结于一个树状结构，顶层是根，弹出式或附加式窗口处于顶层的子叶上。该协议还定义了一个定位器接口，用于辅助定位弹窗，并提供有关窗口周围事物的那些信息。</p><p><code>xdg-shell</code>，作为一个扩展协议，它并没有在 <code>wayland.xml</code> 中定义。取而代之的是你将会在 <code>wayland-protocols</code> 包中找到它。在你的系统中，它可能被安装在类似于 <code>/usr/share/wayland-protocols/stable/xdg-shell/xdg-shell.xml</code> 的路径下。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">1074   │   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">interface</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xdg_popup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">1075   │     </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">description</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">summary</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">short-lived, popup surfaces for menus</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre></div><h2 id="xdg-wm-base" tabindex="-1">xdg_wm_base <a class="header-anchor" href="#xdg-wm-base" aria-hidden="true">#</a></h2><p><code>xdg_wm_base</code> 是规范中定义的唯一一个全局接口，它提供了创建你所需要的其他每个对象的请求。最基本的实现是从处理 &quot;ping&quot; 事件开始的——当混成器发送该事件时，你应该及时响应 &quot;pong&quot; 请求，以表明你还没有陷入死锁。另一个请求涉及到定位器的创建，也就是先前有提到的，我们将把这些细节留到第十章。首先我们要研究的请求是 <code>get_xdg_surface</code>。</p>`,6),p=[n];function t(c,r,d,i,D,_){return e(),a("div",null,p)}const F=s(l,[["render",t]]);export{y as __pageData,F as default};
