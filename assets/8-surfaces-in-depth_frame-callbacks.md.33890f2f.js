import{_ as s,c as a,o as n,d as l}from"./app.1dfb0975.js";const i=JSON.parse('{"title":"帧回调","description":"","frontmatter":{},"headers":[],"relativePath":"8-surfaces-in-depth/frame-callbacks.md","lastUpdated":1677168613000}'),p={name:"8-surfaces-in-depth/frame-callbacks.md"},o=l(`<h1 id="帧回调" tabindex="-1">帧回调 <a class="header-anchor" href="#帧回调" aria-hidden="true">#</a></h1><p>更新表面最简单的方法是：在需要改变时简单渲染和附加新的帧。这种方法很好用，例如，在事件驱动的应用中，用户按下了一个键，文本框需要重新渲染，那么你就可以立即开始重新渲染，将相应的区域标记为 “损坏”，并附加一个新的缓冲区，在下一帧中呈现。</p><p>然而，有些程序可能希望连续渲染帧率。你可能正在渲染视频游戏的帧、回放视频、或者渲染动画。你的显示器有一个固定的刷新率，或者说它能够显示更新的最快速度（通常是一个数字，如 60Hz、144Hz 等）。超出这个范围渲染帧的速度在快也没有意义，而且这样做会浪费资源——CPU、GPU、甚至是用户的电量。如果你在每次刷新间隔之内发送几个帧，那么除了最后一个帧以外，其它的都会被丢掉，而且是白白地浪费渲染。</p><p>此外，某些情况下，混成器甚至可能不想为你显示新的帧。比如你的应用程序可能已经离开屏幕、被最小化或者隐藏在其它窗口后面、或者只显示了你应用程序的小缩略图，所以混成器可能想以比较低的帧速率渲染你的应用，以节省资源。因此，在 Wayland 客户端中连续渲染帧的最好方法是让混成器告诉你什么时候它准备好接收新的帧：使用帧回调。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">interface</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wl_surface</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- ... --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">request</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">frame</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">callback</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">new_id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">interface</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wl_callback</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">request</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">interface</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>这一请求将会分配一个 <code>wl_callback</code> 对象，它有一个相当简单的接口：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">interface</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wl_callback</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">event</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">done</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">callback_data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">event</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">interface</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当你在一个表面上请求一个帧回调时，一旦这个表面的新帧准备好了，混成器会向回到对象发送一个完成事件。在帧事件的情况下，<code>callback_data</code> 被设置为从一个未指定的时期开始到当前时间，以毫秒为单位计算。你可以将其与上一帧进行比较，以计算动画的进度或对输入事件进行调整。</p><p>有了帧回调这个工具，我们为什么不更新一下第 7.3 章节中的应用程序，让它每一帧都滚动一下呢？让我们先在我们的 <code>client_state</code> 结构体中添加一点状态：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">---</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">client.c</span></span>
<span class="line"><span style="color:#89DDFF;">+++</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">client.c</span></span>
<span class="line"><span style="color:#A6ACCD;">@@ </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">71</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">71</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;"> @@ </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> client_state </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> 	</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> xdg_surface </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">xdg_surface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> 	</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> xdg_toplevel </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">xdg_toplevel</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#676E95;font-style:italic;">	/* State */</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> offset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> last_frame</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wl_buffer_release</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_buffer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_buffer</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span></code></pre></div><p>然后我们将更新我们的 <code>draw_frame</code> 函数以考虑偏移量。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">@@ </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">107</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">109</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> @@ </span><span style="color:#82AAFF;">draw_frame</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> 	</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> 	/* Draw checkerboxed background */</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">offset </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> 	</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> 		</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> x </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> width</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">x </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> y </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(((</span><span style="color:#F07178;">x </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> offset</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> offset</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;"> 				</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">y </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> width </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0xFF666666</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> 			</span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#F07178;"> 				</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">y </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> width </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0xFFEEEEEE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在主函数中，让我们为我们的第一个新帧注册一个回调。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">@@ </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">195</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">230</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> @@ </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> 	</span><span style="color:#82AAFF;">xdg_toplevel_set_title</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state.xdg_toplevel</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Example client</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> 	</span><span style="color:#82AAFF;">wl_surface_commit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state.wl_surface</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_callback </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">cb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wl_surface_frame</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state.wl_surface</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">wl_callback_add_listener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">wl_surface_frame_listener</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;"> 	</span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">wl_display_dispatch</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state.wl_display</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> 		/* This space deliberately left blank */</span></span>
<span class="line"><span style="color:#F07178;"> 	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>然后这样实现它：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">@@ </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">147</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">150</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">38</span><span style="color:#A6ACCD;"> @@ </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> xdg_wm_base_listener xdg_wm_base_listener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> 	.ping </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> xdg_wm_base_ping</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_callback_listener wl_surface_frame_listener</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;">wl_surface_frame_done</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_callback </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">cb</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">+{</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#676E95;font-style:italic;">	/* Destroy this callback */</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#82AAFF;">wl_callback_destroy</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cb</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#676E95;font-style:italic;">	/* Request another frame */</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	cb </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_surface_frame</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">wl_surface</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#82AAFF;">wl_callback_add_listener</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cb</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">wl_surface_frame_listener</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> state</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#676E95;font-style:italic;">	/* Update scroll amount at 24 pixels per second */</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">last_frame</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">		</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> elapsed </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> time </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">last_frame</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> elapsed </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000.0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#676E95;font-style:italic;">	/* Submit a frame for this event */</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> wl_buffer </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">buffer </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">draw_frame</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">state</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#82AAFF;">wl_surface_attach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">wl_surface</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buffer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#82AAFF;">wl_surface_damage_buffer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">wl_surface</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> INT32_MAX</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> INT32_MAX</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#82AAFF;">wl_surface_commit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">wl_surface</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">last_frame</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_callback_listener wl_surface_frame_listener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">	.done </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_surface_frame_done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">+};</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">registry_global</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_registry </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_registry</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> 		</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">interface</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">version</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>现在，每一帧中，我们将：</p><ol><li>销毁现在使用的帧回调</li><li>为下一帧请求一个新的回调</li><li>渲染并提交新的帧</li></ol><p>第三步细分为：</p><ol><li>用一个新的偏移量来更新，使用同上一帧一致的速度滚动。</li><li>准备一个新的 <code>wl_buffer</code> 并为其渲染一帧。</li><li>将新的 <code>wl_buffer</code> 附加到我们的表面。</li><li>将整个表面标记为 “损坏”。</li><li>提交表面。</li></ol><p>步骤 3 和 4 更新表面的待定状态，为其赋予一个新的缓冲区，并表示整个表面状态已经改变。第 5 步提交这个待定状态，并在下一帧中使用它。原子化应用这个新的缓冲区意味着我们永远不会只显示最后帧的一半，从而产生一个更好的无撕裂体验。编译并运行更新后的客户端，亲身体验一下吧。</p>`,21),t=[o];function e(c,r,F,D,y,C){return n(),a("div",null,t)}const _=s(p,[["render",e]]);export{i as __pageData,_ as default};
