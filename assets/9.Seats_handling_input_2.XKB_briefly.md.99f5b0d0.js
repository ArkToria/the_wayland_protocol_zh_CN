import{_ as s,c as n,o as a,d as o}from"./app.700cfe46.js";const A=JSON.parse('{"title":"XBK 简介","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用 XKB","slug":"使用-xkb","link":"#使用-xkb","children":[]}],"relativePath":"9.Seats_handling_input/2.XKB_briefly.md","lastUpdated":1673863362000}'),e={name:"9.Seats_handling_input/2.XKB_briefly.md"},l=o(`<h1 id="xbk-简介" tabindex="-1">XBK 简介 <a class="header-anchor" href="#xbk-简介" aria-hidden="true">#</a></h1><blockquote><p><a href="https://wiki.archlinux.org/title/X_keyboard_extension" target="_blank" rel="noreferrer">X_keyboard_extension</a></p></blockquote><p>我们清单上的下一个输入设备是键盘，但在讨论它们之前，我们需要先停下来补充一些额外的背景知识。键位映射 (Keymaps) 是键盘输入中涉及到的一个重要的细节，XKB 是 Wayland 上推荐的处理键盘的方式。</p><p>当你按下键盘上的一个键时，它会向计算机发送一个编码，这只是分配给该物理按键的一个数字，在我的键盘上，编码 1 是 Escape 键，Shift 是 42，以此类推。我使用的是 US ANSI 键盘布局，但还有许多其他的布局，它们的编码也不相同。在我朋友的德国键盘上，编码 12 产生 &#39;ß&#39;，而我的则产生 &#39;-&#39;。</p><p>为了解决这一问题，我们使用了一个叫 &quot;xkbcommon&quot; 的库，它的名字源自于它的作用是将 XKB (X KeyBoard) 的通用编码提取到一个独立的库中。XKB 定义了大量的按键符号，如 <code>XKB_KEY_A</code> 和 <code>XKB_KEY_ssharp</code> （ß，来自德语），以及 <code>XKB_KEY_kana_WO</code> （を，来自日语）。</p><p>然而，识别这些按键并将它们与这样的按键符号联系起来只是问题的其中一部分。如果按住 Shift 键，&#39;a&#39; 可以产生 &#39;A&#39;，&#39;を&#39; 在片假名模式下被写成 &#39;ヲ&#39;，虽然严格来说 &#39;ß&#39; 有一个大写版本，但它几乎不被使用，理所当然也不会被打出来。向 Shift 这样的键被称为修饰键，而像平假名和片假名这样的被称之为组。有些修饰键可以锁定，比如 Caps Lock。XKB 有处理这些情况的基元，并维护一个状态机，跟踪你的键盘在做什么，并准确找出用户试图输入的 Unicode 编码点。</p><h2 id="使用-xkb" tabindex="-1">使用 XKB <a class="header-anchor" href="#使用-xkb" aria-hidden="true">#</a></h2><p>那么，<code>xkbcommon</code> 究竟是如何使用的呢？第一步是链接到它，然后抓取头文件 <code>xkbcommon/xkbcommon.h</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><p>大多数使用 <code>xkbcommon</code> 的程序都必须管理以下三个对象：</p><ul><li><code>xkb_context:</code> 一个用于配置其他 XKB 资源的句柄</li><li><code>xkb_keymap:</code> 一个从编码到键盘符号的映射</li><li><code>xkb_state:</code> 一个将键盘符号转化为 <code>UTF-8</code> 字符串的状态机</li></ul><p>设置的过程通常如下：</p><ol><li>使用 <code>xkb_context_new</code> 创建一个新的 <code>xkb_context</code>，通常将 <code>XKB_CONTEXT_NO_FLAGS</code> 传递给它，除非你在做一些特殊的事情。</li><li>获取一个字符串形式的键映射（key map）</li><li>使用 <code>xkb_keymap_new_from_string</code> 来为这个键映射创建一个 <code>xkb_keymap</code>。这里只有一种键映射格式：<code>XKB_KEYMAP_FORMAT_TEXT_V1</code>，你将其作为格式参数传给函数。同样，除非你有特殊安排，否则应使用 <code>XKB_KEYMAP_COMPILE_NO_FLAGS</code> 作为标志传入。</li><li>使用 <code>xkb_state_new</code> 为你的键映射创建一个 <code>xkb_state</code>。这个状态会增加键映射的引用计数 （refcount），所以如果你自己已经用完了，请使用 <code>xkb_keymap_unref</code> 来解引用。</li><li>从一个按键上获得编码。</li><li>将扫描到的编码传入 <code>xkb_state_key_get_one_sym</code> 以获得 <a href="https://wiki.linuxquestions.org/wiki/List_of_keysyms" target="_blank" rel="noreferrer"><code>keysyms</code></a>，并传入 <code>xkb_state_key_get_utf8</code> 获得 <code>UTF-8</code> 字符串就大功告成了！</li></ol><p><em>*这些步骤将在下一节中具体讨论。</em></p><p>就代码而言，这个过程看起来如下：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">xkbcommon/xkbcommon.h</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// -lxkbcommon</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">keymap_str </span><span style="color:#89DDFF;">=</span><span style="color:#676E95;font-style:italic;"> /* ... */</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* Create an XKB context */</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> xkb_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xkb_context_new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">XKB_CONTEXT_NO_FLAGS</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* Use it to parse a keymap string */</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> xkb_keymap </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">keymap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xkb_keymap_new_from_string</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    xkb_context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> keymap_str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> XKB_KEYMAP_FORMAT_TEXT_V1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    XKB_KEYMAP_COMPILE_NO_FLAGS</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* Create an XKB state machine */</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> xkb_state </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xkb_state_new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">keymap</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>然后处理扫描到的编码：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> scancode </span><span style="color:#89DDFF;">=</span><span style="color:#676E95;font-style:italic;"> /* ... */</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">xkb_keysym_t</span><span style="color:#A6ACCD;"> sym </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xkb_state_key_get_one_sym</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scancode</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sym </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> XKB_KEY_F1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* Do the thing you do when the user presses F1 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#82AAFF;">xkb_state_key_get_utf8</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scancode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8 input: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>有了这些细节，我们已经准备好解决键盘输入的处理问题。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><code>xkbcommon</code> 带有一个 <code>.pc</code> 文件：使用 <code>pkgconf --clflags xkbcommon</code> 和 <code>pkgconf --libs xkbcommon</code>，或是你的编译系统喜欢的方式来获取 <code>pc</code> 文件。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,20),p=[l];function t(c,r,y,i,D,_){return a(),n("div",null,p)}const d=s(e,[["render",t]]);export{A as __pageData,d as default};
