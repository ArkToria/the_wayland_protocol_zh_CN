import{_ as s,c as n,o as a,d as l}from"./app.700cfe46.js";const A=JSON.parse('{"title":"扩展我们的示例代码","description":"","frontmatter":{},"headers":[{"level":2,"title":"设置座位","slug":"设置座位","link":"#设置座位","children":[]},{"level":2,"title":"接入指针事件","slug":"接入指针事件","link":"#接入指针事件","children":[]},{"level":2,"title":"接入键盘事件","slug":"接入键盘事件","link":"#接入键盘事件","children":[]},{"level":2,"title":"接入触摸事件","slug":"接入触摸事件","link":"#接入触摸事件","children":[]},{"level":2,"title":"接下来该做什么？","slug":"接下来该做什么","link":"#接下来该做什么","children":[]}],"relativePath":"9.Seats_handling_input/5.Expanding_our_example_code.md","lastUpdated":1673863362000}'),p={name:"9.Seats_handling_input/5.Expanding_our_example_code.md"},o=l(`<h1 id="扩展我们的示例代码" tabindex="-1">扩展我们的示例代码 <a class="header-anchor" href="#扩展我们的示例代码" aria-hidden="true">#</a></h1><p>在前面几章中，我们建立了一个简单的客户端，它可以在显示器上展示其表面。让我们把这个代码扩展一下，建立一个可以接收输入事件的客户端。为了简单起见，我们仅仅将输入事件记录到 stderr。</p><p>这需要更多的代码，而不仅仅是将到目前为止的工作绑在一起。我们需要做的第一件事就是设置座位。</p><h2 id="设置座位" tabindex="-1">设置座位 <a class="header-anchor" href="#设置座位" aria-hidden="true">#</a></h2><p>我们首先需要的是一个对座位的引用。我们将把它添加到我们的 <code>client_state</code> 结构体中，并添加键盘、指针和触摸对象供后期使用。</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        struct wl_shm *wl_shm;</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct wl_compositor *wl_compositor;</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct xdg_wm_base *xdg_wm_base;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct wl_seat *wl_seat;</span></span>
<span class="line"><span style="color:#A6ACCD;">        /* Objects */</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct wl_surface *wl_surface;</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct xdg_surface *xdg_surface;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct wl_keyboard *wl_keyboard;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct wl_pointer *wl_pointer;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct wl_touch *wl_touch;</span></span>
<span class="line"><span style="color:#A6ACCD;">        /* State */</span></span>
<span class="line"><span style="color:#A6ACCD;">        float offset;</span></span>
<span class="line"><span style="color:#A6ACCD;">        uint32_t last_frame;</span></span>
<span class="line"><span style="color:#A6ACCD;">        int width, height;</span></span>
<span class="line"></span></code></pre></div><p>我们还需要更新 <code>registry_global</code>，为该座位注册一个监听器。</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">                                wl_registry, name, &amp;xdg_wm_base_interface, 1);</span></span>
<span class="line"><span style="color:#A6ACCD;">                xdg_wm_base_add_listener(state-&gt;xdg_wm_base,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                &amp;xdg_wm_base_listener, state);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       } else if (strcmp(interface, wl_seat_interface.name) == 0) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               state-&gt;wl_seat = wl_registry_bind(</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">                               wl_registry, name, &amp;wl_seat_interface, 7);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               wl_seat_add_listener(state-&gt;wl_seat,</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">                               &amp;wl_seat_listener, state);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"></span></code></pre></div><p>请注意，我们绑定的是最新版本的座位接口，即第 7 版。让我们把监听器也加上：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_seat_capabilities</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_seat </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_seat</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">capabilities</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">       /* TODO */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_seat_name</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_seat </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_seat</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">seat name: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_seat_listener wl_seat_listener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       .capabilities </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_seat_capabilities</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .name </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_seat_name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>如果你现在编译 <code>(cc -o client client.c xdg-shell-protocol.c)</code> 并运行这个，你的座位名字就应该被打印到 stderr。</p><h2 id="接入指针事件" tabindex="-1">接入指针事件 <a class="header-anchor" href="#接入指针事件" aria-hidden="true">#</a></h2><p>让我们来谈谈光标指针事件。如果你还记得，前面我们提到来自 Wayland 服务端的指针事件会被累积为一个单一逻辑事件。因此，我们需要定义一个结构体来存储这些事件。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> pointer_event_mask </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       POINTER_EVENT_ENTER </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       POINTER_EVENT_LEAVE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       POINTER_EVENT_MOTION </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       POINTER_EVENT_BUTTON </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       POINTER_EVENT_AXIS </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       POINTER_EVENT_AXIS_SOURCE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       POINTER_EVENT_AXIS_STOP </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       POINTER_EVENT_AXIS_DISCRETE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> pointer_event </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> event_mask</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#F07178;"> surface_x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> surface_y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> button</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> serial</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> valid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#C792EA;">int32_t</span><span style="color:#F07178;"> discrete</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> axis_source</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>这里我们使用一个位掩码来识别我们接受到的单个指针帧中的事件，并将每个事件的相关信息存储到各自的字段中。让我们也将此添加到我们的状态结构体中：</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        /* State */</span></span>
<span class="line"><span style="color:#A6ACCD;">        float offset;</span></span>
<span class="line"><span style="color:#A6ACCD;">        uint32_t last_frame;</span></span>
<span class="line"><span style="color:#A6ACCD;">        int width, height;</span></span>
<span class="line"><span style="color:#A6ACCD;">        bool closed;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct pointer_event pointer_event;</span></span>
<span class="line"><span style="color:#A6ACCD;"> };</span></span>
<span class="line"></span></code></pre></div><p>然后我们需要更新我们的 <code>wl_seat_capabilities</code>，为有光标指针输入功能的座位指定指针对象。</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> static void</span></span>
<span class="line"><span style="color:#A6ACCD;"> wl_seat_capabilities(void *data, struct wl_seat *wl_seat, uint32_t capabilities)</span></span>
<span class="line"><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct client_state *state = data;</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">       /* TODO */</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       bool have_pointer = capabilities &amp; WL_SEAT_CAPABILITY_POINTER;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       if (have_pointer &amp;&amp; state-&gt;wl_pointer == NULL) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               state-&gt;wl_pointer = wl_seat_get_pointer(state-&gt;wl_seat);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               wl_pointer_add_listener(state-&gt;wl_pointer,</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">                               &amp;wl_pointer_listener, state);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       } else if (!have_pointer &amp;&amp; state-&gt;wl_pointer != NULL) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               wl_pointer_release(state-&gt;wl_pointer);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               state-&gt;wl_pointer = NULL;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><p>这里值得解释一下。回想一下，功能 <code>capabilities</code> 是此座位支持的设备类型的位掩码，即如果支持，则进行位与运算 (&amp;) 将产生非零值。然后，如果我们有一个光标指针，并且还没有配置它，我们就访问第一个分支 (第一个 if)，使用 <code>wl_seat_get_pointer</code> 来分配一个光标指针的引用并将它存储在我们的状态 (state) 中。如果座位不支持光标指针，但我们却已经配置了一个，那么需要使用 <code>wl_pointer_release</code> 来释放这个引用。请记住，一个座位的 <code>capabilities</code> 可能在运行时改变，例如，当用户重新插拔他们的鼠标时座位所拥有的功能就会改变。</p><p>我们还为指针配置了一个监听器。让我们将它也添加到结构体中：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer_listener wl_pointer_listener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       .enter </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_enter</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .leave </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_leave</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .motion </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_motion</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .button </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_button</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .axis </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_axis</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .frame </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_frame</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .axis_source </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_axis_source</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .axis_stop </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_axis_stop</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .axis_discrete </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_pointer_axis_discrete</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>指针拥有许多事件，让我们来看看它们。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_enter</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_surface </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">surface</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">surface_x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">surface_y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> POINTER_EVENT_ENTER</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">serial</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> serial</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">surface_x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> surface_x</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">surface_y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> surface_y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_leave</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_surface </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">surface</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">serial</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> serial</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> POINTER_EVENT_LEAVE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>进入 &quot;enter&quot; 和离开 &quot;leave&quot; 事件是非常直截了当的，它们为其余的执行工作提供了舞台。我们更新事件掩码以包括适当的事件，然后用我们提供的数据填充进去。运动 &quot;motion&quot; 和按钮 &quot;button&quot; 事件也是十分类似的：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_motion</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">surface_x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">surface_y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> POINTER_EVENT_MOTION</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">surface_x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> surface_x</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">surface_y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> surface_y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_button</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">button</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> POINTER_EVENT_BUTTON</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">serial</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> serial</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">button</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> button</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>轴事件有点复杂，因为存在两个方向的轴：水平和垂直。因此，我们的 <code>pointer_event</code> 结构体也包含具有两组轴事件的数组。我们处理这些的代码最终如下：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_axis</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">axis</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> POINTER_EVENT_AXIS</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">axis</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">valid</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">axis</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_axis_source</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">axis_source</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_SOURCE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">axis_source</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> axis_source</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_axis_stop</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">axis</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_STOP</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">axis</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">valid</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_axis_discrete</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">axis</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">discrete</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_DISCRETE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">axis</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">valid</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">axis</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">discrete</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> discrete</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>除了更新受到影响的轴这一主要变化之外，其余部分也同样非常直截了当。请注意 &quot;valid&quot; 布尔值的使用：我们有可能受到更新了一个轴但没更新另一个的指针帧 (pointer frame)，所以我们使用 &quot;valid&quot; 值来确定该帧事件中哪些轴被有效更新。</p><p>说到这里，现在是该集中注意力的地方了：我们的 &quot;frame&quot; 句柄。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_pointer_frame</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_pointer</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> pointer_event </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">event </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pointer_event</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pointer frame @ %d: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> POINTER_EVENT_ENTER</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">entered %f, %f </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_x</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_y</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> POINTER_EVENT_LEAVE</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">leave</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> POINTER_EVENT_MOTION</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">motion %f, %f </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_x</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_y</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> POINTER_EVENT_BUTTON</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> WL_POINTER_BUTTON_STATE_RELEASED </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">released</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pressed</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button %d %s </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">button</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> state</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> axis_events </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> POINTER_EVENT_AXIS</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_SOURCE</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_STOP</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_DISCRETE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">axis_name</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">WL_POINTER_AXIS_VERTICAL_SCROLL</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vertical</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">WL_POINTER_AXIS_HORIZONTAL_SCROLL</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">horizontal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">axis_source</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">WL_POINTER_AXIS_SOURCE_WHEEL</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wheel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">WL_POINTER_AXIS_SOURCE_FINGER</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">finger</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">WL_POINTER_AXIS_SOURCE_CONTINUOUS</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">continuous</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">WL_POINTER_AXIS_SOURCE_WHEEL_TILT</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wheel tilt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> axis_events</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">valid</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#89DDFF;font-style:italic;">continue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s axis </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">axis_name</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> POINTER_EVENT_AXIS</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value %f </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">                                                       </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_DISCRETE</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">discrete %d </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                               </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">discrete</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_SOURCE</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">via %s </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                               </span><span style="color:#A6ACCD;">axis_source</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">axis_source</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> POINTER_EVENT_AXIS_STOP</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(stopped) </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">memset</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">event</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(*</span><span style="color:#F07178;">event</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>毋庸置疑，这是最长的一串代码了。但愿它不会令人感到困惑。我们在这里所做的就是把这一帧期间累积的状态漂亮地打印到 stderr 上。如果你现在再编译并运行这个程序，你应该可以在窗口上晃动你的鼠标，并看到输入事件被打印出来!</p><h2 id="接入键盘事件" tabindex="-1">接入键盘事件 <a class="header-anchor" href="#接入键盘事件" aria-hidden="true">#</a></h2><p>让我们用一些字段更新我们的 <code>client_state</code> 结构，以存储 XKB 的状态。</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@@</span><span style="color:#A6ACCD;"> -105,6 +107,9 </span><span style="color:#89DDFF;">@@</span><span style="color:#A6ACCD;"> struct client_state {</span></span>
<span class="line"><span style="color:#A6ACCD;">        int width, height;</span></span>
<span class="line"><span style="color:#A6ACCD;">        bool closed;</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct pointer_event pointer_event;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct xkb_state *xkb_state;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct xkb_context *xkb_context;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct xkb_keymap *xkb_keymap;</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"></span></code></pre></div><p>我们需要 <code>xkbcommon</code> 头文件来定义这些。通常当我们这样做的时候，我将会把 <code>assert.h</code> 也拉进来。</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@@</span><span style="color:#A6ACCD;"> -1,4 +1,5 </span><span style="color:#89DDFF;">@@</span></span>
<span class="line"><span style="color:#A6ACCD;"> #define _POSIX_C_SOURCE 200112L</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">#include &lt;assert.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> #include &lt;errno.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> #include &lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> #include &lt;limits.h&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">@@</span><span style="color:#A6ACCD;"> -9,6 +10,7 </span><span style="color:#89DDFF;">@@</span></span>
<span class="line"><span style="color:#A6ACCD;"> #include &lt;time.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> #include &lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> #include &lt;wayland-client.h&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">#include &lt;xkbcommon/xkbcommon.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> #include &quot;xdg-shell-client-protocol.h&quot;</span></span>
<span class="line"></span></code></pre></div><p>我们还需要在我们的主函数中初始化 <code>xkb_context</code>:</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@@</span><span style="color:#A6ACCD;"> -603,6 +649,7 </span><span style="color:#89DDFF;">@@</span><span style="color:#A6ACCD;"> main(int argc, char *argv[])</span></span>
<span class="line"><span style="color:#A6ACCD;">        state.height = 480;</span></span>
<span class="line"><span style="color:#A6ACCD;">        state.wl_display = wl_display_connect(NULL);</span></span>
<span class="line"><span style="color:#A6ACCD;">        state.wl_registry = wl_display_get_registry(state.wl_display);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       state.xkb_context = xkb_context_new(XKB_CONTEXT_NO_FLAGS);</span></span>
<span class="line"><span style="color:#A6ACCD;">        wl_registry_add_listener(state.wl_registry, &amp;wl_registry_listener, &amp;state);</span></span>
<span class="line"><span style="color:#A6ACCD;">        wl_display_roundtrip(state.wl_display);</span></span>
<span class="line"></span></code></pre></div><p>下一步，让我们来更新我们座位的功能函数，把我们的键盘监听器也接入。</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        } else if (!have_pointer &amp;&amp; state-&gt;wl_pointer != NULL) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                wl_pointer_release(state-&gt;wl_pointer);</span></span>
<span class="line"><span style="color:#A6ACCD;">                state-&gt;wl_pointer = NULL;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       bool have_keyboard = capabilities &amp; WL_SEAT_CAPABILITY_KEYBOARD;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       if (have_keyboard &amp;&amp; state-&gt;wl_keyboard == NULL) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               state-&gt;wl_keyboard = wl_seat_get_keyboard(state-&gt;wl_seat);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               wl_keyboard_add_listener(state-&gt;wl_keyboard,</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">                               &amp;wl_keyboard_listener, state);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       } else if (!have_keyboard &amp;&amp; state-&gt;wl_keyboard != NULL) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               wl_keyboard_release(state-&gt;wl_keyboard);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               state-&gt;wl_keyboard = NULL;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       }</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"></span></code></pre></div><p>我们也要在这里定义我们使用的 <code>wl_keyboard_listener</code>。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_keyboard_listener wl_keyboard_listener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       .keymap </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_keyboard_keymap</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .enter </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_keyboard_enter</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .leave </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_keyboard_leave</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .key </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_keyboard_key</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .modifiers </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_keyboard_modifiers</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .repeat_info </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_keyboard_repeat_info</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>现在开始有了一些变化，让我们从 keymap 开始：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_keyboard_keymap</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_keyboard </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_keyboard</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">format</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">format </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">map_shm </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mmap</span><span style="color:#89DDFF;">(NULL,</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> PROT_READ</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> MAP_SHARED</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> fd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">map_shm </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> MAP_FAILED</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> xkb_keymap </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">xkb_keymap </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">xkb_keymap_new_from_string</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> map_shm</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                       XKB_KEYMAP_FORMAT_TEXT_V1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> XKB_KEYMAP_COMPILE_NO_FLAGS</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">munmap</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">map_shm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> xkb_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">xkb_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">xkb_state_new</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">xkb_keymap</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">xkb_keymap_unref</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_keymap</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">xkb_state_unref</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_keymap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> xkb_keymap</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> xkb_state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>现在我们可以看到为什么我们需要添加 <code>assert.h</code>——我们在这里用断言来确保 keymap 的格式是我们所期望的。然后，我们用 mmap 将混成器发送给我们的文件描述符 fd 映射成一个 <code>char*</code> 指针，我们可以将其传入 <code>xkb_keymap_new_from_string</code>。不要忘记 <code>munmap</code> 并在之后关闭这个文件描述符，然后设置我们的 XKB 状态。还要注意的是，我们也用 &quot;*_unref&quot; 去掉了先前在调用此函数时所设置的一切 XKB keymap 或 state 引用，以防混成器在运行时改变 keymap<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_keyboard_enter</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_keyboard </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_keyboard</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_surface </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">surface</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_array </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">keys</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">keyboard enter; keys pressed are:</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">wl_array_for_each</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> keys</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#FFCB6B;">xkb_keysym_t</span><span style="color:#F07178;"> sym </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">xkb_state_key_get_one_sym</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">key </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">xkb_keysym_get_name</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">sym</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sym: %-12s (%d), </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> sym</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">xkb_state_key_get_utf8</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">key </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf8: &#39;%s&#39;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>当键盘 &quot;进入&quot; 我们的表面时，我们已经获得了键盘的输入焦点。混成器会将这之前所按键的队列转发出来，这里我们只是枚举它们并记录它们的 keysym 名称和 UTF-8 等效值。当按键被按下的时候，我们会做类似如下的事情：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_keyboard_key</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_keyboard </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_keyboard</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> keycode </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> key </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">xkb_keysym_t</span><span style="color:#F07178;"> sym </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">xkb_state_key_get_one_sym</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> keycode</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">xkb_keysym_get_name</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">sym</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">action </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">               state </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> WL_KEYBOARD_KEY_STATE_PRESSED </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">press</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">release</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key %s: sym: %-12s (%d), </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> action</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> sym</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">xkb_state_key_get_utf8</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> keycode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                       buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf8: &#39;%s&#39;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>最后，我们增加了其余三个小事件的实现：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_keyboard_leave</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_keyboard </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_keyboard</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_surface </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">surface</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">keyboard leave</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_keyboard_modifiers</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_keyboard </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_keyboard</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mods_depressed</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mods_latched</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mods_locked</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">group</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">xkb_state_update_mask</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">xkb_state</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               mods_depressed</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> mods_latched</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> mods_locked</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> group</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_keyboard_repeat_info</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_keyboard </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_keyboard</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">rate</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">delay</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">       /* Left as an exercise for the reader */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>对于修饰符，我们可以进一步解码，但大多数应用程序不需要这样做。我们只是在这里更新 XKB 的状态。至于处理按键重复，这对于你的应用来说有诸多限制。比如，你想重复输入文本吗，想重复键盘快捷键吗，这些重复的所需的时间如何与你的事件循环进行互动？这些问题的答案需要由你自己来决定。</p><p>如果你再次编译并运行，你应该能够开始在窗口中开始打字，并看到你的输入被打印到终端日志中。这值得欢呼！</p><h2 id="接入触摸事件" tabindex="-1">接入触摸事件 <a class="header-anchor" href="#接入触摸事件" aria-hidden="true">#</a></h2><p>最后，我们将新增设备的触摸功能支持。就和指针事件一样，触摸设备也存在一个 &quot;frame&quot; 帧事件。然而，由于有多个触摸点可能在一帧内被更新，所以它们可能变得更加复杂。我们将增加一些结构体和枚举类型来表示状态的累积。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> touch_event_mask </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       TOUCH_EVENT_DOWN </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       TOUCH_EVENT_UP </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       TOUCH_EVENT_MOTION </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       TOUCH_EVENT_CANCEL </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       TOUCH_EVENT_SHAPE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       TOUCH_EVENT_ORIENTATION </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> touch_point </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> valid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">int32_t</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> event_mask</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#F07178;"> surface_x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> surface_y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#F07178;"> major</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> minor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#F07178;"> orientation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> touch_event </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> event_mask</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> serial</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point </span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>请注意，我在这里选择了 10 个触摸点，假设大多数用户只会使用这么多手指。而对于较大的多用户触摸屏，你可能需要一个更高的上限。此外，有些触摸硬件同时支持的触摸点少于十个，仅有八个也是常见的，而支持触摸点数量更少的硬件在老旧设备中也十分常见。</p><p>我们把这个结构体添加到 <code>client_state</code>:</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@@</span><span style="color:#A6ACCD;"> -110,6 +135,7 </span><span style="color:#89DDFF;">@@</span><span style="color:#A6ACCD;"> struct client_state {</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct xkb_state *xkb_state;</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct xkb_context *xkb_context;</span></span>
<span class="line"><span style="color:#A6ACCD;">        struct xkb_keymap *xkb_keymap;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       struct touch_event touch_event;</span></span>
<span class="line"><span style="color:#A6ACCD;"> };</span></span>
<span class="line"></span></code></pre></div><p>当触摸支持可用的时候，我们将更新座位的功能句柄，以介入一个监听器。</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        } else if (!have_keyboard &amp;&amp; state-&gt;wl_keyboard != NULL) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                wl_keyboard_release(state-&gt;wl_keyboard);</span></span>
<span class="line"><span style="color:#A6ACCD;">                state-&gt;wl_keyboard = NULL;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       bool have_touch = capabilities &amp; WL_SEAT_CAPABILITY_TOUCH;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       if (have_touch &amp;&amp; state-&gt;wl_touch == NULL) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               state-&gt;wl_touch = wl_seat_get_touch(state-&gt;wl_seat);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               wl_touch_add_listener(state-&gt;wl_touch,</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">                               &amp;wl_touch_listener, state);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       } else if (!have_touch &amp;&amp; state-&gt;wl_touch != NULL) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               wl_touch_release(state-&gt;wl_touch);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">               state-&gt;wl_touch = NULL;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">       }</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"></span></code></pre></div><p>我们对作为上触摸功能的出现和消失也做了同样处理，因此我们的代码在运行时设备热插拔处理方面都很健壮。不过，触摸设备热插拔的情况在实际中不太常见。</p><p>这里是其自身的监听器:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_touch_listener wl_touch_listener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       .down </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_touch_down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .up </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_touch_up</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .motion </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_touch_motion</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .frame </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_touch_frame</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .cancel </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_touch_cancel</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .shape </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_touch_shape</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       .orientation </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> wl_touch_orientation</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>为了解决多点触摸问题，我们需要写一个小的辅助函数:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> touch_point </span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;">get_touch_point</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">client_state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">+{</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_event </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">touch </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">touch_event</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> nmemb </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> invalid </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> nmemb</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">                       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">invalid </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">valid</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">                       invalid </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">invalid </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">invalid</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">valid</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">invalid</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">invalid</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">+}</span></span>
<span class="line"></span></code></pre></div><p>这个函数的基本目的是从我们添加到 <code>touch_event</code> 结构体的数组中，根据我们要接收事件的触摸点 ID，挑选一个触摸点。如果我们找到了该 ID 的现有触摸点，我们就将其返回。如果没有，则会返回第一个可用的触摸点。如果我们都找完了还没有，就会返回 <code>NULL</code>。</p><p>现在我们可以利用这点来实现我们的第一个功能：触摸。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_touch_down</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_touch </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_touch</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_surface </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">surface</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get_touch_point</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">client_state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> TOUCH_EVENT_UP</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">touch_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">touch_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">serial</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> serial</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>和指针事件一样，我们也是简单地将这个状态累积起来，以便后续使用。我们还不知道这个事件是否代表一个完整的触摸帧。让我们为触摸添加一些类似的东西：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_touch_up</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_touch </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_touch</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">serial</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get_touch_point</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">client_state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> TOUCH_EVENT_UP</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>以及运动：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_touch_motion</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_touch </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_touch</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get_touch_point</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">client_state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> TOUCH_EVENT_MOTION</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">touch_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>触摸事件的取消与之前有所不同，因为它一次性 “取消” 了所有活动的触摸点。我们只需要将其存储在 <code>touch_event</code> 的顶层事件掩码中。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_touch_cancel</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_touch </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_touch</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">touch_event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> TOUCH_EVENT_CANCEL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>然而，形状和方向事件类似于向上、向下和移动，因为它们告诉我们一个特定触摸点的尺寸。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_touch_shape</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_touch </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_touch</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">major</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">minor</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get_touch_point</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">client_state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> TOUCH_EVENT_SHAPE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">major</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> major</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">minor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> minor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_touch_orientation</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_touch </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_touch</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#C792EA;">int32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wl_fixed_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">orientation</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get_touch_point</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">client_state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> TOUCH_EVENT_ORIENTATION</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">orientation</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> orientation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>最后，在收到一个帧事件时，我们可以将所有这些累积的状态解释为一个单一的输入事件，就像我们的光标指针代码一样。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">wl_touch_frame</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wl_touch </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">wl_touch</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> client_state </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">client_state </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_event </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">touch </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">client_state</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">touch_event</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> nmemb </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">touch event @ %d:</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> nmemb</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> touch_point </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">point </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">valid</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#89DDFF;font-style:italic;">continue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">point %d: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">touch</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">points</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> TOUCH_EVENT_DOWN</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">down %f,%f </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                       </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_x</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">                                       </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_y</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> TOUCH_EVENT_UP</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">up </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> TOUCH_EVENT_MOTION</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">motion %f,%f </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                       </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_x</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">                                       </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">surface_y</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> TOUCH_EVENT_SHAPE</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shape %fx%f </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                       </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">major</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">                                       </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">minor</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">event_mask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> TOUCH_EVENT_ORIENTATION</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                       </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orientation %f </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                       </span><span style="color:#82AAFF;">wl_fixed_to_double</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">orientation</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#A6ACCD;">point</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">valid</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>编译并再次运行这个程序，你就可以看到当你与触摸设备交互时，触摸事件被答应到 stderr （假设你现在有支持触摸的设备）。现在我们的客户端终于了实现输入的支持！</p><h2 id="接下来该做什么" tabindex="-1">接下来该做什么？ <a class="header-anchor" href="#接下来该做什么" aria-hidden="true">#</a></h2><p>有很多不同种类的输入设备，因此扩展我们的代码以支持这些设备是一项相当庞大的工作——仅在本章中我们的代码量就增加了 2.5 倍。不过收获应该也是相当大的，因为你现在已经熟悉了足够多的 Wayland 概念（和代码），由此你可以实现多种多样的客户端了。</p><p>这之后还有更多的东西要学——在最后几章，我们将介绍弹出窗口、上下文菜单、交互式窗口的移动和大小调整、剪贴板和拖放支持，以及后来的一些有趣的扩展协议，以支持更多小众的使用场景。我强烈建议你在构建自己的客户端之前先读到第 10.1 章，因为它涵盖诸如根据混成器的要求调整窗口大小等内容。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这种情况在实践中确实发生了！ <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,84),t=[o];function e(c,r,F,y,D,i){return a(),n("div",null,t)}const _=s(p,[["render",e]]);export{A as __pageData,_ as default};
